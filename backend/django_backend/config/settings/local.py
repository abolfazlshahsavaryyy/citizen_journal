"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from .base import *
from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# disable Django's automatic logging configuration if we manage it manually
LOGGING_CONFIG = None   # <- this tells Django "I will configure logging myself"
# (Django docs: setting LOGGING_CONFIG=None disables automatic config). :contentReference[oaicite:2]{index=2}

# directory for logs
LOG_DIR = os.path.join(BASE_DIR, "logs")

# Now import & run our configure function
from ..interceptor import configure_logging

configure_logging(
    log_level=os.environ.get("LOG_LEVEL", "INFO"),
    log_dir=LOG_DIR,
    rotation="10 MB",        # rotate when file > 10MB
    retention="30 days",     # keep 30 days of logs
    compression="zip",       # compress rotated files
    console=True,
    backtrace=True,
    diagnose=False,
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =SECRET_KEY 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEBUG

ALLOWED_HOSTS = ALLOWED_HOSTS


# Application definition
# Core Django apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Third-party apps
THIRD_PARTY_APPS = [
    'rest_framework',
    'drf_yasg',
    'rest_framework_simplejwt',
    'corsheaders',
    'graphene_django'
]

# Local (custom) apps
LOCAL_APPS = [
    'Page',
    'Comment',
    'Discussion',
    'Question',
    'Account',
    'Notification',
]

# Combine all apps
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
MIDDLEWARE = [
    "config.middleware.cors.CustomCorsMiddleware",
    "config.middleware.security.CustomSecurityMiddleware",
    "config.middleware.session.CustomSessionMiddleware",
    "config.middleware.common.CustomCommonMiddleware",
    "config.middleware.csrf.CustomCsrfMiddleware",
    "config.middleware.auth.CustomAuthMiddleware",
    #"config.middleware.first_request.FirstAuthRequestMiddleware",
    "config.middleware.request_logging.RequestLoggingMiddleware",
    "config.middleware.messages.CustomMessageMiddleware",
    "config.middleware.clickjacking.CustomClickjackingMiddleware",
]

 

CORS_ALLOW_ALL_ORIGINS = True
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend', 'templates')],  
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
AUTH_USER_MODEL = 'Account.ApplicationUser'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': { 'class': 'logging.StreamHandler' },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
import os

from django.core.exceptions import ImproperlyConfigured

def get_env_var(var_name):
    """Raise an error if environment variable is missing"""
    value = os.getenv(var_name)
    if value is None:
        raise ImproperlyConfigured(f"Missing required environment variable: {var_name}")
    return value

import os

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv("POSTGRES_DB"),
#         'USER': os.getenv("POSTGRES_USER"),
#         'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
#         'HOST': 'db',  # IMPORTANT: this must match the docker service name
#         'PORT': '5432',
#     }
# }
DATABASES=DATABASES


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT Authorization header. Example: Bearer <your_token_here>',
        }
    },
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # Combine all throttle classes
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],

    # Combine all throttle rates
    'DEFAULT_THROTTLE_RATES': {
        # Global rates
        'anon': '50/day',
        'user': '2000/day',

        # Scoped rates
        'post_news': '5/minute',
        'read_news': '100/minute',
        'like_dislike_news': '3000/hour',
        'create_page': '2/hour',
        'create_topic': '10/minute',
        'ask_question': '5/minute',
        'answer_question': '5/minute',
    }
}
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),  # Expect: Authorization: Bearer <token>
    "ROTATE_REFRESH_TOKENS": True,     # optional: rotate on refresh
    "BLACKLIST_AFTER_ROTATION": True,  # optional: requires blacklist app
    # "ALGORITHM": "HS256",
    # "SIGNING_KEY": env("JWT_SIGNING_KEY", default=SECRET_KEY),
}
# Celery settings
CELERY_BROKER_URL = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

GRAPHENE = {
    "SCHEMA": "Page.graphql.schema.schema",
    "MIDDLEWARE": [
        
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]
