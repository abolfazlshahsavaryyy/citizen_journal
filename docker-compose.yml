#version: '3.9'

services:
  # db:
  #   image: postgres:15
  #   restart: no
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  db:
    image: postgres:15
    env_file:
      - ./backend/django_backend/.env
    #environment:
      # optional - already in env_file
      # POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - mynetwork
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5



  fastapi:
    build:
      context: ./backend/fastapi_backend/FakeNewsAI/fastapi_app
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./backend/fastapi_backend/FakeNewsAI/fastapi_app:/app
    depends_on:
      - db
    networks:
      - mynetwork
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: no



  hate_speech_api:
    build:
      context: ./backend/fastapi_backend/HateSpeech/fast_api
    container_name: hate_speech_api
    ports:
      - "8002:8000"  # Expose to host
    networks:
      - mynetwork
    restart: unless-stopped




  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # for RabbitMQ web UI
    networks:
      - mynetwork
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  # celery:
  #   build:
  #     context: ./backend/django_backend
  #     dockerfile: Dockerfile
  #   command: celery -A config worker -l info
  #   volumes:
  #     - ./backend/django_backend:/app
  #   depends_on:
  #     - db
  #     - rabbitmq
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_HOST: db  # Add this if used in settings.py
  #     POSTGRES_PORT: 5432  # Optional
  #     DJANGO_SETTINGS_MODULE: config.settings  # if needed

  celery:
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/django_backend/.env
    depends_on:
      - db
      - rabbitmq
      - redis
      #- summarizer
    networks:
      - mynetwork
    command: sh -c "sleep 5 && celery -A config worker -l info"
    volumes:
      - ./backend/django_backend:/app


  # django:
  #   build:
  #     context: ./backend/django_backend
  #     dockerfile: Dockerfile
  #   command: python manage.py runserver 0.0.0.0:8000
  #   volumes:
  #     - ./backend/django_backend:/app
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - db
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   restart: no
##############################################
  django:
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/django_backend/.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.local
    volumes:
      - ./backend/django_backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - rabbitmq
      - redis
      #- summarizer
      - sharenewsgrpc
    networks:
      - mynetwork
    command: sh -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: no

  
  # summarizer:
  #   build:
  #     context: ./backend/fastapi_backend/SummarizerService
  #     dockerfile: Dockerfile
  #   container_name: summarizer_service
  #   ports:
  #     - "8003:8003"
  #   networks:
  #     - mynetwork

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    networks:
      - mynetwork




  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "YourStrong!Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
    - sql_data:/var/opt/mssql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/1433'"]
      interval: 10s
      retries: 10
      timeout: 5s




  sharenewsgrpc:
    build:
      context: ./backend/AspNetCoreServices/ShareNewsGrpc
      dockerfile: Dockerfile
    container_name: sharenewsgrpc
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_USE_POLLING_FILE_WATCHER=true
      - DOTNET_HOST_PATH=/usr/share/dotnet/dotnet
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=ShareNewsDb;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True;
    ports:
      - "8080:8080"
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  pgdata:
  sql_data:
